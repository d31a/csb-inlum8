{"version":3,"sources":["Calc.js","App.js","index.js"],"names":["Calc","useState","currentValue","setCurrentValue","previousValue","setPreviousValue","operation","setOperator","handleClick","e","getSameValue","currentTarget","value","alert","includes","prev","parseFloat","curr","className","id","onClick","App","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.e74a726a.chunk.js","sourcesContent":["// The useState hook is imported to retain data between renders, and to update the variable.\r\nimport { useState, useRef } from \"react\";\r\n\r\nexport default function Calc() {\r\n  // Create and store button value using hooks first holds the state, second is the dispatch which retrieves data\r\n  // Keeps track of curent value and previous value that a user enters\r\n  const [currentValue, setCurrentValue] = useState(\"0\");\r\n  const [previousValue, setPreviousValue] = useState(\"0\");\r\n\r\n  // Keeps track of the operation\r\n  const [operation, setOperator] = useState(null);\r\n\r\n  // Calculator operators\r\n  // Handling diffrent types of button that a user can click\r\n  // When a user clicks a number button, appends that number to current value\r\n  // When a user clicks an operator button, saves the current value to previous value, clears current value\r\n\r\n  const handleClick = (e) => {\r\n    const getSameValue = e.currentTarget.value;\r\n    switch (getSameValue) {\r\n      // Numbers\r\n      case \"0\":\r\n      case \"1\":\r\n      case \"2\":\r\n      case \"3\":\r\n      case \"4\":\r\n      case \"5\":\r\n      case \"6\":\r\n      case \"7\":\r\n      case \"8\":\r\n      case \"9\":\r\n        setCurrentValue(\r\n          currentValue === \"0\" ? getSameValue : currentValue + getSameValue\r\n        );\r\n        break;\r\n\r\n      // Calculator operations\r\n      case \"+\":\r\n      case \"-\":\r\n      case \"*\":\r\n      case \"%\":\r\n        setPreviousValue(currentValue);\r\n        setCurrentValue(\"0\");\r\n        setOperator(getSameValue);\r\n        break;\r\n      // error handling for not dividing by 0\r\n      case \"/\":\r\n        if (currentValue === \"0\") {\r\n          alert(\"Cannot divide by zero\");\r\n          break;\r\n        }\r\n        setPreviousValue(currentValue);\r\n        setCurrentValue(\"0\");\r\n        setOperator(getSameValue);\r\n        break;\r\n\r\n      //If there is a decimal point\r\n      case \".\":\r\n        if (!currentValue.includes(\".\")) {\r\n          setCurrentValue(currentValue + \".\");\r\n        }\r\n        break;\r\n\r\n      // Calculating the result\r\n      case \"=\":\r\n        const prev = parseFloat(previousValue);\r\n        const curr = parseFloat(currentValue);\r\n        const computation = // if operation is equal to operation, do the operation of previous value and current value\r\n          operation === \"+\"\r\n            ? prev + curr\r\n            : operation === \"-\"\r\n            ? prev - curr\r\n            : operation === \"*\"\r\n            ? prev * curr\r\n            : operation === \"/\"\r\n            ? prev / curr\r\n            : operation === \"%\"\r\n            ? prev % curr\r\n            : curr;\r\n        setCurrentValue(computation); // sets the value to the computation variable\r\n        setPreviousValue(\"0\"); // erases previous value\r\n        setOperator(null); // erases the value of operator used\r\n\r\n        break;\r\n\r\n      // Clearing the results\r\n      case \"clear-all\":\r\n        setCurrentValue(\"0\");\r\n        setPreviousValue(null);\r\n        setOperator(null);\r\n        break;\r\n      case \"clear-entry\":\r\n        setCurrentValue(\"0\");\r\n        break;\r\n      default:\r\n        setCurrentValue(null);\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Add a value attrbute to the buttons\r\n  // Make the buttons 0 - 9, ., +, -, /, * C, CE, %, =\r\n  // place in table of 4 columns(4 elements), 5 rows\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Calculator App</h1>\r\n      <div className=\"WrapperCalc\">\r\n        <div className=\"CalcScreen\">\r\n          {/*This outputs the value to a paragraph*/}\r\n          <p id=\"ResultScreen\">{currentValue}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"CalcBtns\" id=\"first-row\">\r\n        <button value=\"clear-all\" onClick={handleClick}>\r\n          AC\r\n        </button>\r\n        <button value=\"clear-entry\" onClick={handleClick}>\r\n          CE\r\n        </button>\r\n        <button value=\"%\" onClick={handleClick}>\r\n          %\r\n        </button>\r\n        <button value=\"/\" onClick={handleClick}>\r\n          รท\r\n        </button>\r\n      </div>\r\n      <div className=\"CalcBtns\">\r\n        <button value=\"7\" onClick={handleClick}>\r\n          7\r\n        </button>\r\n        <button value=\"8\" onClick={handleClick}>\r\n          8\r\n        </button>\r\n        <button value=\"9\" onClick={handleClick}>\r\n          9\r\n        </button>\r\n        <button value=\"*\" onClick={handleClick}>\r\n          x\r\n        </button>\r\n      </div>\r\n      <div className=\"CalcBtns\">\r\n        <button value=\"4\" onClick={handleClick}>\r\n          4\r\n        </button>\r\n        <button value=\"5\" onClick={handleClick}>\r\n          5\r\n        </button>\r\n        <button value=\"6\" onClick={handleClick}>\r\n          6\r\n        </button>\r\n        <button value=\"-\" onClick={handleClick}>\r\n          -\r\n        </button>\r\n      </div>\r\n      <div className=\"CalcBtns\">\r\n        <button value=\"1\" onClick={handleClick}>\r\n          1\r\n        </button>\r\n        <button value=\"2\" onClick={handleClick}>\r\n          2\r\n        </button>\r\n        <button value=\"3\" onClick={handleClick}>\r\n          3\r\n        </button>\r\n        <button value=\"+\" onClick={handleClick}>\r\n          +\r\n        </button>\r\n      </div>\r\n      <div className=\"CalcBtns\">\r\n        <button id=\"big-zero\" value=\"0\" onClick={handleClick}>\r\n          0\r\n        </button>\r\n        <button value=\".\" onClick={handleClick}>\r\n          .\r\n        </button>\r\n        <button value=\"=\" onClick={handleClick}>\r\n          =\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// App to console.log state of a button when clicked.\n// Credit: Ben Bagley 03/01/2022\n\nimport React from \"react\";\nimport \"./styles.css\";\nimport Calc from \"./Calc\";\n\nexport default function App() {\n  return <Calc />;\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}